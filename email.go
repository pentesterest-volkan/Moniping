package main

import (
	"crypto/tls"
	"fmt"
	"net/smtp"
	"strings"
	"time"

	"github.com/sirupsen/logrus"
)

func SendAlert(config *Config, server *Server, status string) {
	for i := 0; i < 3; i++ { // Retry logic
		err := sendEmail(config, server, status) // Pass config here
		if err == nil {
			LogAlert(server, status) // Log successful alert
			return
		}
		logrus.Errorf("Failed to send email: %v", err)
		time.Sleep(2 * time.Second) // Wait before retrying
	}
}

func sendEmail(config *Config, server *Server, status string) error {
	to := append(server.Recipients, config.Email.DefaultRecipients...)
	subject := fmt.Sprintf("Alert: Server %s (%s) is %s", server.Name, server.IP, status)

	logo := "https://www.netfix.com.tr/main-file/atrik/assets/images/Logo-Web-900x174.png"

	var body string

	if status == "down" {
		body = fmt.Sprintf(`
		<html>
		<head>
			<style>
				body {
					font-family: Arial, sans-serif;
					color: #333;
				}
				.container {
					width: 80%%;
					margin: 0 auto;
					padding: 20px;
					border: 1px solid #e0e0e0;
					border-radius: 8px;
					background-color: #f9f9f9;
				}
				.header {
					font-size: 20px;
					font-weight: bold;
					color: #D32F2F;
					margin-bottom: 20px;
				}
				.section-title {
					font-size: 18px;
					font-weight: bold;
					margin-top: 20px;
					color: #333;
				}
				.disclaimer {
					font-size: 14px;
					color: red;
					margin-top: 20px;
				}
				ul {
					margin-top: 0;
				}
                .logo {
                    text-align: center;
                    margin: 30px;
                }
                .logo img {
                    max-width: 200px;
                    height: auto;
                }
			</style>
		</head>
		<body>
			<div class="container">
				<div class="header">Server Down Alert</div>

				<p><strong>Client:</strong> %s</p>
				<p><strong>Server:</strong> %s (IP: %s) has stopped responding to ping requests.</p>

				<div class="section-title">Possible reasons for the server shutdown:</div>
				<ul>
					<li>Network issues or connectivity problems.</li>
					<li>Server hardware failure or maintenance.</li>
					<li>Software issues or crashes on the server.</li>
				</ul>

				<p>Please investigate the issue as soon as possible.</p>
				<p class="disclaimer"><strong>Disclaimer:</strong> This is an automated alert generated by the monitoring system. Please do not reply to this email.</p>
				<div class="logo">
					<img src="%s" alt="Netfix">
				</div>
			</div>
		</body>
		</html>`,
			config.ClientName, server.Name, server.IP, logo)
	} else {
		body = fmt.Sprintf(`
		<html>
		<head>
			<style>
				body {
					font-family: Arial, sans-serif;
					color: #333;
				}
				.container {
					width: 80%%;
					margin: 0 auto;
					padding: 20px;
					border: 1px solid #e0e0e0;
					border-radius: 8px;
					background-color: #f9f9f9;
				}
				.header {
					font-size: 20px;
					font-weight: bold;
					color: #4CAF50;
					margin-bottom: 20px;
				}
				.section-title {
					font-size: 18px;
					font-weight: bold;
					margin-top: 20px;
					color: #333;
				}
				.disclaimer {
					font-size: 14px;
					color: red;
					margin-top: 20px;
				}
                .logo {
                    text-align: center;
                    margin: 30px;
                }
                .logo img {
                    max-width: 200px;
                    height: auto;
                }
			</style>
		</head>
		<body>
			<div class="container">
				<div class="header">Server Recovery Notification</div>

				<p><strong>Client:</strong> %s</p>
				<p><strong>Server:</strong> %s (IP: %s) is now back online and responding to ping requests.</p>

				<p>The server appears to have recovered from its previous issues and is operating normally. However, it is recommended to review the server's logs and status to ensure that everything is functioning correctly.</p>
				<p class="disclaimer"><strong>Disclaimer:</strong> This is an automated alert generated by the monitoring system. Please do not reply to this email.</p>
				<div class="logo">
					<img src="%s" alt="Netfix">
				</div>
			</div>
		</body>
		</html>`,
			config.ClientName, server.Name, server.IP, logo)
	}

	msg := "From: " + config.Email.From + "\n" +
		"To: " + strings.Join(to, ",") + "\n" +
		"Subject: " + subject + "\n" +
		"MIME-version: 1.0;\nContent-Type: text/html; charset=\"UTF-8\";\n\n" +
		body

	// Connect to the SMTP server
	client, err := smtp.Dial(config.Email.SMTPHost + ":" + config.Email.SMTPPort)
	if err != nil {
		return fmt.Errorf("failed to connect to SMTP server: %v", err)
	}
	defer client.Close()

	// Start TLS
	tlsConfig := &tls.Config{
		InsecureSkipVerify: true, // Only for testing; set to false in production
		ServerName:         config.Email.SMTPHost,
	}
	if err := client.StartTLS(tlsConfig); err != nil {
		return fmt.Errorf("failed to initiate STARTTLS: %v", err)
	}

	// Authenticate
	auth := smtp.PlainAuth("", config.Email.From, config.Email.Password, config.Email.SMTPHost)
	if err := client.Auth(auth); err != nil {
		return fmt.Errorf("authentication failed: %v", err)
	}

	// Set sender and recipients
	if err := client.Mail(config.Email.From); err != nil {
		return fmt.Errorf("failed to set sender: %v", err)
	}
	for _, addr := range to {
		if err := client.Rcpt(addr); err != nil {
			return fmt.Errorf("failed to set recipient %s: %v", addr, err)
		}
	}

	// Send the email body
	wc, err := client.Data()
	if err != nil {
		return fmt.Errorf("failed to get writer: %v", err)
	}
	_, err = wc.Write([]byte(msg))
	if err != nil {
		return fmt.Errorf("failed to write email body: %v", err)
	}
	if err := wc.Close(); err != nil {
		return fmt.Errorf("failed to close writer: %v", err)
	}

	return nil
}
